{
  "name": "Beef",
  "scopeName": "source.bf",
  "fileTypes": [
    "bf"
  ],
  "uuid": "dbbeef2c-40b8-4698-aa57-6209ffce2695",
  "patterns": [
    {
      "include": "#preprocessor"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#directives"
    },
    {
      "include": "#declarations"
    },
    {
      "include": "#script-top-level"
    }
  ],
  "repository": {
    "directives": {
      "patterns": [
        {
          "include": "#extern-alias-directive"
        },
        {
          "include": "#using-directive"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "include": "#namespace-declaration"
        },
        {
          "include": "#type-declarations"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "script-top-level": {
      "patterns": [
        {
          "include": "#method-declaration"
        },
        {
          "include": "#statement"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "type-declarations": {
      "patterns": [
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#storage-modifier"
        },
        {
          "include": "#class-declaration"
        },
        {
          "include": "#delegate-declaration"
        },
        {
          "include": "#enum-declaration"
        },
        {
          "include": "#interface-declaration"
        },
        {
          "include": "#struct-declaration"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "class-or-struct-members": {
      "patterns": [
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#storage-modifier"
        },
        {
          "include": "#type-declarations"
        },
        {
          "include": "#property-declaration"
        },
        {
          "include": "#field-declaration"
        },
        {
          "include": "#event-declaration"
        },
        {
          "include": "#indexer-declaration"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#constructor-declaration"
        },
        {
          "include": "#destructor-declaration"
        },
        {
          "include": "#operator-declaration"
        },
        {
          "include": "#conversion-operator-declaration"
        },
        {
          "include": "#method-declaration"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "interface-members": {
      "patterns": [
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#property-declaration"
        },
        {
          "include": "#event-declaration"
        },
        {
          "include": "#indexer-declaration"
        },
        {
          "include": "#method-declaration"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "statement": {
      "patterns": [
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#while-statement"
        },
        {
          "include": "#do-statement"
        },
        {
          "include": "#for-statement"
        },
        {
          "include": "#foreach-statement"
        },
        {
          "include": "#if-statement"
        },
        {
          "include": "#else-part"
        },
        {
          "include": "#switch-statement"
        },
        {
          "include": "#goto-statement"
        },
        {
          "include": "#return-statement"
        },
        {
          "include": "#break-or-continue-statement"
        },
        {
          "include": "#throw-statement"
        },
        {
          "include": "#yield-statement"
        },
        {
          "include": "#await-statement"
        },
        {
          "include": "#try-statement"
        },
        {
          "include": "#checked-unchecked-statement"
        },
        {
          "include": "#lock-statement"
        },
        {
          "include": "#using-statement"
        },
        {
          "include": "#labeled-statement"
        },
        {
          "include": "#local-declaration"
        },
        {
          "include": "#block"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#checked-unchecked-expression"
        },
        {
          "include": "#typeof-or-default-expression"
        },
        {
          "include": "#nameof-expression"
        },
        {
          "include": "#throw-expression"
        },
        {
          "include": "#interpolated-string"
        },
        {
          "include": "#verbatim-interpolated-string"
        },
        {
          "include": "#this-or-base-expression"
        },
        {
          "include": "#conditional-operator"
        },
        {
          "include": "#expression-operators"
        },
        {
          "include": "#await-expression"
        },
        {
          "include": "#query-expression"
        },
        {
          "include": "#as-expression"
        },
        {
          "include": "#is-expression"
        },
        {
          "include": "#anonymous-method-expression"
        },
        {
          "include": "#object-creation-expression"
        },
        {
          "include": "#array-creation-expression"
        },
        {
          "include": "#anonymous-object-creation-expression"
        },
        {
          "include": "#invocation-expression"
        },
        {
          "include": "#member-access-expression"
        },
        {
          "include": "#element-access-expression"
        },
        {
          "include": "#cast-expression"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#parenthesized-expression"
        },
        {
          "include": "#tuple-deconstruction-assignment"
        },
        {
          "include": "#initializer-expression"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "extern-alias-directive": {
      "begin": "\\s*(extern)\\b\\s*(alias)\\b\\s*(@?[_[:alpha:]][_[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.extern.bf"
        },
        "2": {
          "name": "keyword.other.alias.bf"
        },
        "3": {
          "name": "variable.other.alias.bf"
        }
      },
      "end": "(?=;)"
    },
    "using-directive": {
      "patterns": [
        {
          "begin": "\\b(using)\\b\\s+(static)\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.using.bf"
            },
            "2": {
              "name": "keyword.other.static.bf"
            }
          },
          "end": "(?=;)",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "begin": "\\b(using)\\s+(?=(@?[_[:alpha:]][_[:alnum:]]*)\\s*=)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.using.bf"
            },
            "2": {
              "name": "entity.name.type.alias.bf"
            }
          },
          "end": "(?=;)",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#type"
            },
            {
              "include": "#operator-assignment"
            }
          ]
        },
        {
          "begin": "\\b(using)\\s*",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.using.bf"
            }
          },
          "end": "(?=;)",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "name": "entity.name.type.namespace.bf",
              "match": "@?[_[:alpha:]][_[:alnum:]]*"
            },
            {
              "include": "#operator-assignment"
            }
          ]
        }
      ]
    },
    "attribute-section": {
      "begin": "(\\[)(assembly|module|field|event|method|param|property|return|type)?(\\:)?",
      "beginCaptures": {
        "1": {
          "name": "punctuation.squarebracket.open.bf"
        },
        "2": {
          "name": "keyword.other.attribute-specifier.bf"
        },
        "3": {
          "name": "punctuation.separator.colon.bf"
        }
      },
      "end": "(\\])",
      "endCaptures": {
        "1": {
          "name": "punctuation.squarebracket.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#attribute"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "attribute": {
      "patterns": [
        {
          "include": "#type-name"
        },
        {
          "include": "#attribute-arguments"
        }
      ]
    },
    "attribute-arguments": {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#attribute-named-argument"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "attribute-named-argument": {
      "begin": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?==)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.variable.property.bf"
        }
      },
      "end": "(?=(,|\\)))",
      "patterns": [
        {
          "include": "#operator-assignment"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "namespace-declaration": {
      "begin": "\\b(namespace)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.namespace.bf"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "name": "entity.name.type.namespace.bf",
          "match": "@?[_[:alpha:]][_[:alnum:]]*"
        },
        {
          "include": "#punctuation-accessor"
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.bf"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#declarations"
            },
            {
              "include": "#using-directive"
            },
            {
              "include": "#punctuation-semicolon"
            }
          ]
        }
      ]
    },
    "storage-modifier": {
      "name": "storage.modifier.bf",
      "match": "(?<!\\.)\\b(new|public|protected|internal|private|abstract|virtual|override|sealed|static|partial|readonly|volatile|const|extern|async|unsafe|ref)\\b"
    },
    "class-declaration": {
      "begin": "(?=\\bclass\\b)",
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "(?x)\r\n\\b(class)\\b\\s+\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.class.bf"
            },
            "2": {
              "name": "entity.name.type.class.bf"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#type-parameter-list"
            },
            {
              "include": "#base-types"
            },
            {
              "include": "#generic-constraints"
            }
          ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.bf"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#class-or-struct-members"
            }
          ]
        },
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "delegate-declaration": {
      "begin": "(?x)\r\n(?:\\b(delegate)\\b)\\s+\r\n(?<type-name>\r\n  (?:\r\n    (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\s*\r\n(<([^<>]+)>)?\\s*\r\n(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.delegate.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "name": "entity.name.type.delegate.bf"
        },
        "8": {
          "patterns": [
            {
              "include": "#type-parameter-list"
            }
          ]
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#parenthesized-parameter-list"
        },
        {
          "include": "#generic-constraints"
        }
      ]
    },
    "enum-declaration": {
      "begin": "(?=\\benum\\b)",
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "(?=enum)",
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "match": "(enum)\\s+(@?[_[:alpha:]][_[:alnum:]]*)",
              "captures": {
                "1": {
                  "name": "keyword.other.enum.bf"
                },
                "2": {
                  "name": "entity.name.type.enum.bf"
                }
              }
            },
            {
              "begin": ":",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.separator.colon.bf"
                }
              },
              "end": "(?=\\{)",
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            }
          ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.bf"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor"
            },
            {
              "include": "#comment"
            },
            {
              "include": "#attribute-section"
            },
            {
              "include": "#punctuation-comma"
            },
            {
              "begin": "@?[_[:alpha:]][_[:alnum:]]*",
              "beginCaptures": {
                "0": {
                  "name": "entity.name.variable.enum-member.bf"
                }
              },
              "end": "(?=(,|\\}))",
              "patterns": [
                {
                  "include": "#comment"
                },
                {
                  "include": "#variable-initializer"
                }
              ]
            }
          ]
        },
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "interface-declaration": {
      "begin": "(?=\\binterface\\b)",
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "(?x)\r\n(interface)\\b\\s+\r\n(@?[_[:alpha:]][_[:alnum:]]*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.interface.bf"
            },
            "2": {
              "name": "entity.name.type.interface.bf"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#type-parameter-list"
            },
            {
              "include": "#base-types"
            },
            {
              "include": "#generic-constraints"
            }
          ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.bf"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#interface-members"
            }
          ]
        },
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "struct-declaration": {
      "begin": "(?=\\bstruct\\b)",
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "(?x)\r\n(struct)\\b\\s+\r\n(@?[_[:alpha:]][_[:alnum:]]*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.struct.bf"
            },
            "2": {
              "name": "entity.name.type.struct.bf"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#type-parameter-list"
            },
            {
              "include": "#base-types"
            },
            {
              "include": "#generic-constraints"
            }
          ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.bf"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#class-or-struct-members"
            }
          ]
        },
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "type-parameter-list": {
      "begin": "\\<",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.typeparameters.begin.bf"
        }
      },
      "end": "\\>",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.typeparameters.end.bf"
        }
      },
      "patterns": [
        {
          "match": "\\b(in|out)\\b",
          "captures": {
            "1": {
              "name": "storage.modifier.bf"
            }
          }
        },
        {
          "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.type-parameter.bf"
            }
          }
        },
        {
          "include": "#comment"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#attribute-section"
        }
      ]
    },
    "base-types": {
      "begin": ":",
      "beginCaptures": {
        "0": {
          "name": "punctuation.separator.colon.bf"
        }
      },
      "end": "(?=\\{|where)",
      "patterns": [
        {
          "include": "#type"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#preprocessor"
        }
      ]
    },
    "generic-constraints": {
      "begin": "(where)\\s+(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.where.bf"
        },
        "2": {
          "name": "storage.type.bf"
        },
        "3": {
          "name": "punctuation.separator.colon.bf"
        }
      },
      "end": "(?=\\{|where|;|=>)",
      "patterns": [
        {
          "name": "keyword.other.class.bf",
          "match": "\\bclass\\b"
        },
        {
          "name": "keyword.other.struct.bf",
          "match": "\\bstruct\\b"
        },
        {
          "match": "(new)\\s*(\\()\\s*(\\))",
          "captures": {
            "1": {
              "name": "keyword.other.new.bf"
            },
            "2": {
              "name": "punctuation.parenthesis.open.bf"
            },
            "3": {
              "name": "punctuation.parenthesis.close.bf"
            }
          }
        },
        {
          "include": "#type"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#generic-constraints"
        }
      ]
    },
    "field-declaration": {
      "begin": "(?x)\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\s* # first field name\r\n(?!=>|==)(?=,|;|=|$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "6": {
          "name": "entity.name.variable.field.bf"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "name": "entity.name.variable.field.bf",
          "match": "@?[_[:alpha:]][_[:alnum:]]*"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#class-or-struct-members"
        }
      ]
    },
    "property-declaration": {
      "begin": "(?x)\r\n\r\n# The negative lookahead below ensures that we don't match nested types\r\n# or other declarations as properties.\r\n(?![[:word:][:space:]]*\\b(?:class|interface|struct|enum|event)\\b)\r\n\r\n(?<return-type>\r\n  (?<type-name>\r\n    (?:\r\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\\s+\r\n)\r\n(?<interface-name>\\g<type-name>\\s*\\.\\s*)?\r\n(?<property-name>\\g<identifier>)\\s*\r\n(?=\\{|=>|$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#type"
            },
            {
              "include": "#punctuation-accessor"
            }
          ]
        },
        "8": {
          "name": "entity.name.variable.property.bf"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#property-accessors"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#class-or-struct-members"
        }
      ]
    },
    "indexer-declaration": {
      "begin": "(?x)\r\n(?<return-type>\r\n  (?<type-name>\r\n    (?:\r\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\\s+\r\n)\r\n(?<interface-name>\\g<type-name>\\s*\\.\\s*)?\r\n(?<indexer-name>this)\\s*\r\n(?=\\[)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#type"
            },
            {
              "include": "#punctuation-accessor"
            }
          ]
        },
        "8": {
          "name": "keyword.other.this.bf"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#bracketed-parameter-list"
        },
        {
          "include": "#property-accessors"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "event-declaration": {
      "begin": "(?x)\r\n\\b(event)\\b\\s*\r\n(?<return-type>\r\n  (?<type-name>\r\n    (?:\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\\s+\r\n)\r\n(?<interface-name>\\g<type-name>\\s*\\.\\s*)?\r\n(?<event-names>\\g<identifier>(?:\\s*,\\s*\\g<identifier>)*)\\s*\r\n(?=\\{|;|$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.event.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#type"
            },
            {
              "include": "#punctuation-accessor"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "name": "entity.name.variable.event.bf",
              "match": "@?[_[:alpha:]][_[:alnum:]]*"
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#event-accessors"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "property-accessors": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.curlybrace.open.bf"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.curlybrace.close.bf"
        }
      },
      "patterns": [
        {
          "name": "storage.modifier.bf",
          "match": "\\b(private|protected|internal)\\b"
        },
        {
          "name": "keyword.other.get.bf",
          "match": "\\b(get)\\b"
        },
        {
          "name": "keyword.other.set.bf",
          "match": "\\b(set)\\b"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "event-accessors": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.curlybrace.open.bf"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.curlybrace.close.bf"
        }
      },
      "patterns": [
        {
          "name": "keyword.other.add.bf",
          "match": "\\b(add)\\b"
        },
        {
          "name": "keyword.other.remove.bf",
          "match": "\\b(remove)\\b"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "method-declaration": {
      "begin": "(?x)\r\n(?<return-type>\r\n  (?<type-name>\r\n    (?:\r\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\\s+\r\n)\r\n(?<interface-name>\\g<type-name>\\s*\\.\\s*)?\r\n(\\g<identifier>)\\s*\r\n(<([^<>]+)>)?\\s*\r\n(?=\\()",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#type"
            },
            {
              "include": "#punctuation-accessor"
            }
          ]
        },
        "8": {
          "name": "entity.name.function.bf"
        },
        "9": {
          "patterns": [
            {
              "include": "#type-parameter-list"
            }
          ]
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#parenthesized-parameter-list"
        },
        {
          "include": "#generic-constraints"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        }
      ]
    },
    "constructor-declaration": {
      "begin": "(?=@?[_[:alpha:]][_[:alnum:]]*\\s*\\()",
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\b",
          "captures": {
            "1": {
              "name": "entity.name.function.bf"
            }
          }
        },
        {
          "begin": "(:)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.colon.bf"
            }
          },
          "end": "(?=\\{|=>)",
          "patterns": [
            {
              "include": "#constructor-initializer"
            }
          ]
        },
        {
          "include": "#parenthesized-parameter-list"
        },
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        }
      ]
    },
    "constructor-initializer": {
      "begin": "\\b(?:(base)|(this))\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.base.bf"
        },
        "2": {
          "name": "keyword.other.this.bf"
        }
      },
      "end": "(?<=\\))",
      "patterns": [
        {
          "include": "#argument-list"
        }
      ]
    },
    "destructor-declaration": {
      "begin": "(~)(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.tilde.bf"
        },
        "2": {
          "name": "entity.name.function.bf"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#parenthesized-parameter-list"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        }
      ]
    },
    "operator-declaration": {
      "begin": "(?x)\r\n(?<type-name>\r\n  (?:\r\n    (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(?<operator-keyword>(?:\\b(?:operator)))\\s*\r\n(?<operator>(?:\\+|-|\\*|/|%|&|\\||\\^|\\<\\<|\\>\\>|==|!=|\\>|\\<|\\>=|\\<=|!|~|\\+\\+|--|true|false))\\s*\r\n(?=\\()",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "6": {
          "name": "keyword.other.operator-decl.bf"
        },
        "7": {
          "name": "entity.name.function.bf"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#parenthesized-parameter-list"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        }
      ]
    },
    "conversion-operator-declaration": {
      "begin": "(?x)\r\n(?<explicit-or-implicit-keyword>(?:\\b(?:explicit|implicit)))\\s*\r\n(?<operator-keyword>(?:\\b(?:operator)))\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(?=\\()",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "match": "\\b(explicit)\\b",
              "captures": {
                "1": {
                  "name": "keyword.other.explicit.bf"
                }
              }
            },
            {
              "match": "\\b(implicit)\\b",
              "captures": {
                "1": {
                  "name": "keyword.other.implicit.bf"
                }
              }
            }
          ]
        },
        "2": {
          "name": "keyword.other.operator-decl.bf"
        },
        "3": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#parenthesized-parameter-list"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        }
      ]
    },
    "block": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.curlybrace.open.bf"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.curlybrace.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#statement"
        }
      ]
    },
    "variable-initializer": {
      "begin": "(?<!=|!)(=)(?!=|>)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.assignment.bf"
        }
      },
      "end": "(?=[,\\)\\];}])",
      "patterns": [
        {
          "include": "#ref-modifier"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "expression-body": {
      "begin": "=>",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.arrow.bf"
        }
      },
      "end": "(?=[,\\);}])",
      "patterns": [
        {
          "include": "#ref-modifier"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "goto-statement": {
      "begin": "(?<!\\.)\\b(goto)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.goto.bf"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "begin": "\\b(case)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.case.bf"
            }
          },
          "end": "(?=;)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "match": "\\b(default)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.default.bf"
            }
          }
        },
        {
          "name": "entity.name.label.bf",
          "match": "@?[_[:alpha:]][_[:alnum:]]*"
        }
      ]
    },
    "return-statement": {
      "begin": "(?<!\\.)\\b(return)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.flow.return.bf"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#ref-modifier"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "break-or-continue-statement": {
      "match": "(?<!\\.)\\b(?:(break)|(continue))\\b",
      "captures": {
        "1": {
          "name": "keyword.control.flow.break.bf"
        },
        "2": {
          "name": "keyword.control.flow.continue.bf"
        }
      }
    },
    "throw-statement": {
      "begin": "(?<!\\.)\\b(throw)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.flow.throw.bf"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "yield-statement": {
      "patterns": [
        {
          "include": "#yield-return-statement"
        },
        {
          "include": "#yield-break-statement"
        }
      ]
    },
    "yield-return-statement": {
      "begin": "(?<!\\.)\\b(yield)\\b\\s*\\b(return)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.flow.yield.bf"
        },
        "2": {
          "name": "keyword.control.flow.return.bf"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "yield-break-statement": {
      "match": "(?<!\\.)\\b(yield)\\b\\s*\\b(break)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.flow.yield.bf"
        },
        "2": {
          "name": "keyword.control.flow.break.bf"
        }
      }
    },
    "await-statement": {
      "begin": "(?<!\\.)\\b(await)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.await.bf"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "if-statement": {
      "begin": "(?<!\\.)\\b(if)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.conditional.if.bf"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bf"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#statement"
        }
      ]
    },
    "else-part": {
      "begin": "(?<!\\.)\\b(else)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.conditional.else.bf"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#statement"
        }
      ]
    },
    "switch-statement": {
      "begin": "(?<!\\.)\\b(switch)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.switch.bf"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bf"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.bf"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#switch-label"
            },
            {
              "include": "#statement"
            }
          ]
        }
      ]
    },
    "switch-label": {
      "patterns": [
        {
          "begin": "(?<!\\.)\\b(case)\\b\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.case.bf"
            }
          },
          "end": ":",
          "endCaptures": {
            "0": {
              "name": "punctuation.separator.colon.bf"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "match": "(?<!\\.)\\b(default)\\b\\s*(:)",
          "captures": {
            "1": {
              "name": "keyword.control.default.bf"
            },
            "2": {
              "name": "punctuation.separator.colon.bf"
            }
          }
        }
      ]
    },
    "do-statement": {
      "begin": "(?<!\\.)\\b(do)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.loop.do.bf"
        }
      },
      "end": "(?=;|})",
      "patterns": [
        {
          "include": "#statement"
        }
      ]
    },
    "while-statement": {
      "begin": "(?<!\\.)\\b(while)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.loop.while.bf"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bf"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#statement"
        }
      ]
    },
    "for-statement": {
      "begin": "(?<!\\.)\\b(for)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.loop.for.bf"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bf"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#local-variable-declaration"
            },
            {
              "include": "#expression"
            },
            {
              "include": "#punctuation-comma"
            },
            {
              "include": "#punctuation-semicolon"
            }
          ]
        },
        {
          "include": "#statement"
        }
      ]
    },
    "foreach-statement": {
      "begin": "(?<!\\.)\\b(foreach)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.loop.foreach.bf"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bf"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bf"
            }
          },
          "patterns": [
            {
              "match": "(?x)\r\n(?:\r\n  (\\bvar\\b)|\r\n  (?<type-name>\r\n    (?:\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\s+\r\n\\b(in)\\b",
              "captures": {
                "1": {
                  "name": "keyword.other.var.bf"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#type"
                    }
                  ]
                },
                "7": {
                  "name": "entity.name.variable.local.bf"
                },
                "8": {
                  "name": "keyword.control.loop.in.bf"
                }
              }
            },
            {
              "match": "(?x) # match foreach (var (x, y) in ...)\r\n(?:\\b(var)\\b\\s*)?\r\n(?<tuple>\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s+\r\n\\b(in)\\b",
              "captures": {
                "1": {
                  "name": "keyword.other.var.bf"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#tuple-declaration-deconstruction-element-list"
                    }
                  ]
                },
                "3": {
                  "name": "keyword.control.loop.in.bf"
                }
              }
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#statement"
        }
      ]
    },
    "try-statement": {
      "patterns": [
        {
          "include": "#try-block"
        },
        {
          "include": "#catch-clause"
        },
        {
          "include": "#finally-clause"
        }
      ]
    },
    "try-block": {
      "begin": "(?<!\\.)\\b(try)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.try.bf"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#block"
        }
      ]
    },
    "finally-clause": {
      "begin": "(?<!\\.)\\b(finally)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.try.finally.bf"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#block"
        }
      ]
    },
    "catch-clause": {
      "begin": "(?<!\\.)\\b(catch)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.try.catch.bf"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bf"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bf"
            }
          },
          "patterns": [
            {
              "match": "(?x)\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(?:(\\g<identifier>)\\b)?",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#type"
                    }
                  ]
                },
                "6": {
                  "name": "entity.name.variable.local.bf"
                }
              }
            }
          ]
        },
        {
          "include": "#when-clause"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#block"
        }
      ]
    },
    "when-clause": {
      "begin": "(?<!\\.)\\b(when)\\b\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.try.when.bf"
        },
        "2": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "checked-unchecked-statement": {
      "begin": "(?<!\\.)\\b(?:(checked)|(unchecked))\\b\\s*(?!\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.checked.bf"
        },
        "2": {
          "name": "keyword.other.unchecked.bf"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#block"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "lock-statement": {
      "begin": "(?<!\\.)\\b(lock)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.lock.bf"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bf"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#statement"
        }
      ]
    },
    "using-statement": {
      "begin": "(?<!\\.)\\b(using)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.using.bf"
        }
      },
      "end": "(?=\\;|})",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bf"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#local-variable-declaration"
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#statement"
        }
      ]
    },
    "labeled-statement": {
      "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)",
      "captures": {
        "1": {
          "name": "entity.name.label.bf"
        },
        "2": {
          "name": "punctuation.separator.colon.bf"
        }
      }
    },
    "local-declaration": {
      "patterns": [
        {
          "include": "#local-constant-declaration"
        },
        {
          "include": "#local-variable-declaration"
        },
        {
          "include": "#local-tuple-var-deconstruction"
        }
      ]
    },
    "local-variable-declaration": {
      "begin": "(?x)\r\n(?:\r\n  (?:(\\bref)\\s+(?:(\\breadonly)\\s+)?)?(\\bvar\\b)| # ref local\r\n  (?<type-name>\r\n    (?:\r\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref local\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\s*\r\n(?!=>)\r\n(?=,|;|=|\\))",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.bf"
        },
        "2": {
          "name": "storage.modifier.bf"
        },
        "3": {
          "name": "keyword.other.var.bf"
        },
        "4": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "9": {
          "name": "entity.name.variable.local.bf"
        }
      },
      "end": "(?=;|\\))",
      "patterns": [
        {
          "name": "entity.name.variable.local.bf",
          "match": "@?[_[:alpha:]][_[:alnum:]]*"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "local-constant-declaration": {
      "begin": "(?x)\r\n(?<const-keyword>\\b(?:const)\\b)\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\s*\r\n(?=,|;|=)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "name": "entity.name.variable.local.bf"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "name": "entity.name.variable.local.bf",
          "match": "@?[_[:alpha:]][_[:alnum:]]*"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "local-tuple-var-deconstruction": {
      "begin": "(?x) # e.g. var (x, y) = GetPoint();\r\n(?:\\b(var)\\b\\s*)\r\n(?<tuple>\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s*\r\n(?=;|=|\\))",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.var.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#tuple-declaration-deconstruction-element-list"
            }
          ]
        }
      },
      "end": "(?=;|\\))",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "tuple-deconstruction-assignment": {
      "match": "(?x)\r\n(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s*\r\n(?!=>|==)(?==)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#tuple-deconstruction-element-list"
            }
          ]
        }
      }
    },
    "tuple-declaration-deconstruction-element-list": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#tuple-declaration-deconstruction-element-list"
        },
        {
          "include": "#declaration-expression-tuple"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "match": "(?x) # e.g. x\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\r\n(?=[,)])",
          "captures": {
            "1": {
              "name": "entity.name.variable.tuple-element.bf"
            }
          }
        }
      ]
    },
    "tuple-deconstruction-element-list": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#tuple-deconstruction-element-list"
        },
        {
          "include": "#declaration-expression-tuple"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "match": "(?x) # e.g. x\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\r\n(?=[,)])",
          "captures": {
            "1": {
              "name": "variable.other.readwrite.bf"
            }
          }
        }
      ]
    },
    "declaration-expression-local": {
      "match": "(?x) # e.g. int x OR var x\r\n(?:\r\n  \\b(var)\\b|\r\n  (?<type-name>\r\n    (?:\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\b\\s*\r\n(?=[,)\\]])",
      "captures": {
        "1": {
          "name": "keyword.other.var.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "name": "entity.name.variable.local.bf"
        }
      }
    },
    "declaration-expression-tuple": {
      "match": "(?x) # e.g. int x OR var x\r\n(?:\r\n  \\b(var)\\b|\r\n  (?<type-name>\r\n    (?:\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\b\\s*\r\n(?=[,)])",
      "captures": {
        "1": {
          "name": "keyword.other.var.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "name": "entity.name.variable.tuple-element.bf"
        }
      }
    },
    "checked-unchecked-expression": {
      "begin": "(?<!\\.)\\b(?:(checked)|(unchecked))\\b\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.checked.bf"
        },
        "2": {
          "name": "keyword.other.unchecked.bf"
        },
        "3": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "typeof-or-default-expression": {
      "begin": "(?<!\\.)\\b(?:(typeof)|(default))\\b\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.typeof.bf"
        },
        "2": {
          "name": "keyword.other.default.bf"
        },
        "3": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "nameof-expression": {
      "begin": "(?<!\\.)\\b(nameof)\\b\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.nameof.bf"
        },
        "2": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "throw-expression": {
      "match": "(?<!\\.)\\b(throw)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.flow.throw.bf"
        }
      }
    },
    "interpolated-string": {
      "name": "string.quoted.double.bf",
      "begin": "\\$\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.bf"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.bf"
        },
        "2": {
          "name": "invalid.illegal.newline.bf"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        },
        {
          "include": "#interpolation"
        }
      ]
    },
    "verbatim-interpolated-string": {
      "name": "string.quoted.double.bf",
      "begin": "\\$@\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.bf"
        }
      },
      "end": "\"(?=[^\"])",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.bf"
        }
      },
      "patterns": [
        {
          "include": "#verbatim-string-character-escape"
        },
        {
          "include": "#interpolation"
        }
      ]
    },
    "interpolation": {
      "name": "meta.interpolation.bf",
      "begin": "(?<=[^\\{]|^)((?:\\{\\{)*)(\\{)(?=[^\\{])",
      "beginCaptures": {
        "1": {
          "name": "string.quoted.double.bf"
        },
        "2": {
          "name": "punctuation.definition.interpolation.begin.bf"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.interpolation.end.bf"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#char-literal"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#verbatim-string-literal"
        },
        {
          "include": "#tuple-literal"
        }
      ]
    },
    "boolean-literal": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.bf",
          "match": "(?<!\\.)\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.bf",
          "match": "(?<!\\.)\\bfalse\\b"
        }
      ]
    },
    "null-literal": {
      "name": "constant.language.null.bf",
      "match": "(?<!\\.)\\bnull\\b"
    },
    "numeric-literal": {
      "patterns": [
        {
          "name": "constant.numeric.hex.bf",
          "match": "\\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
        },
        {
          "name": "constant.numeric.binary.bf",
          "match": "\\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
        },
        {
          "name": "constant.numeric.decimal.bf",
          "match": "\\b([0-9_]+)?\\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\\b"
        },
        {
          "name": "constant.numeric.decimal.bf",
          "match": "\\b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\\b"
        },
        {
          "name": "constant.numeric.decimal.bf",
          "match": "\\b[0-9_]+(F|f|D|d|M|m)\\b"
        },
        {
          "name": "constant.numeric.decimal.bf",
          "match": "\\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
        }
      ]
    },
    "char-literal": {
      "name": "string.quoted.single.bf",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.char.begin.bf"
        }
      },
      "end": "(\\')|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.char.end.bf"
        },
        "2": {
          "name": "invalid.illegal.newline.bf"
        }
      },
      "patterns": [
        {
          "include": "#char-character-escape"
        }
      ]
    },
    "char-character-escape": {
      "name": "constant.character.escape.bf",
      "match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})"
    },
    "string-literal": {
      "name": "string.quoted.double.bf",
      "begin": "(?<!@)\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.bf"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.bf"
        },
        "2": {
          "name": "invalid.illegal.newline.bf"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "string-character-escape": {
      "name": "constant.character.escape.bf",
      "match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})"
    },
    "verbatim-string-literal": {
      "name": "string.quoted.double.bf",
      "begin": "@\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.bf"
        }
      },
      "end": "\"(?=[^\"])",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.bf"
        }
      },
      "patterns": [
        {
          "include": "#verbatim-string-character-escape"
        }
      ]
    },
    "verbatim-string-character-escape": {
      "name": "constant.character.escape.bf",
      "match": "\"\""
    },
    "tuple-literal": {
      "begin": "(\\()(?=.*[:,])",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#tuple-literal-element"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "tuple-literal-element": {
      "begin": "(?x)\r\n(?:(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)\\s*)?\r\n(?![,)])",
      "beginCaptures": {
        "0": {
          "name": "entity.name.variable.tuple-element.bf"
        },
        "1": {
          "name": "punctuation.separator.colon.bf"
        }
      },
      "end": "(?=[,)])",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "expression-operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.compound.bf",
          "match": "\\*=|/=|%=|\\+=|-="
        },
        {
          "name": "keyword.operator.assignment.compound.bitwise.bf",
          "match": "\\&=|\\^=|<<=|>>=|\\|="
        },
        {
          "name": "keyword.operator.bitwise.shift.bf",
          "match": "<<|>>"
        },
        {
          "name": "keyword.operator.comparison.bf",
          "match": "==|!="
        },
        {
          "name": "keyword.operator.relational.bf",
          "match": "<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.bf",
          "match": "\\!|&&|\\|\\|"
        },
        {
          "name": "keyword.operator.bitwise.bf",
          "match": "\\&|~|\\^|\\|"
        },
        {
          "name": "keyword.operator.assignment.bf",
          "match": "\\="
        },
        {
          "name": "keyword.operator.decrement.bf",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.bf",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.arithmetic.bf",
          "match": "%|\\*|/|-|\\+"
        },
        {
          "name": "keyword.operator.null-coalescing.bf",
          "match": "\\?\\?"
        }
      ]
    },
    "conditional-operator": {
      "begin": "(?<!\\?)\\?(?!\\?|\\.|\\[)",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.conditional.question-mark.bf"
        }
      },
      "end": ":",
      "endCaptures": {
        "0": {
          "name": "keyword.operator.conditional.colon.bf"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "await-expression": {
      "name": "keyword.other.await.bf",
      "match": "(?!\\.)\\b(await)\\b"
    },
    "parenthesized-expression": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "initializer-expression": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.curlybrace.open.bf"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.curlybrace.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "identifier": {
      "name": "variable.other.readwrite.bf",
      "match": "@?[_[:alpha:]][_[:alnum:]]*"
    },
    "cast-expression": {
      "match": "(?x)\r\n(\\()\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(\\))(?=\\s*@?[_[:alnum:]\\(])",
      "captures": {
        "1": {
          "name": "punctuation.parenthesis.open.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "name": "punctuation.parenthesis.close.bf"
        }
      }
    },
    "as-expression": {
      "match": "(?x)\r\n(?<!\\.)\\b(as)\\b\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)?",
      "captures": {
        "1": {
          "name": "keyword.other.as.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      }
    },
    "is-expression": {
      "match": "(?x)\r\n(?<!\\.)\\b(is)\\b\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)?",
      "captures": {
        "1": {
          "name": "keyword.other.is.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      }
    },
    "this-or-base-expression": {
      "match": "\\b(?:(base)|(this))\\b",
      "captures": {
        "1": {
          "name": "keyword.other.base.bf"
        },
        "2": {
          "name": "keyword.other.this.bf"
        }
      }
    },
    "invocation-expression": {
      "begin": "(?x)\r\n(?:(\\?)\\s*)?                                     # preceding null-conditional operator?\r\n(?:(\\.)\\s*)?                                     # preceding dot?\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*                   # method name\r\n(?<type-args>\\s*<([^<>]|\\g<type-args>)+>\\s*)?\\s* # type arguments\r\n(?=\\()                                           # open paren of argument list",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.null-conditional.bf"
        },
        "2": {
          "name": "punctuation.accessor.bf"
        },
        "3": {
          "name": "entity.name.function.bf"
        },
        "4": {
          "patterns": [
            {
              "include": "#type-arguments"
            }
          ]
        }
      },
      "end": "(?<=\\))",
      "patterns": [
        {
          "include": "#argument-list"
        }
      ]
    },
    "element-access-expression": {
      "begin": "(?x)\r\n(?:(\\?)\\s*)?                        # preceding null-conditional operator?\r\n(?:(\\.)\\s*)?                        # preceding dot?\r\n(?:(@?[_[:alpha:]][_[:alnum:]]*)\\s*)? # property name\r\n(?:(\\?)\\s*)?                        # null-conditional operator?\r\n(?=\\[)                              # open bracket of argument list",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.null-conditional.bf"
        },
        "2": {
          "name": "punctuation.accessor.bf"
        },
        "3": {
          "name": "variable.other.object.property.bf"
        },
        "4": {
          "name": "keyword.operator.null-conditional.bf"
        }
      },
      "end": "(?<=\\])(?!\\s*\\[)",
      "patterns": [
        {
          "include": "#bracketed-argument-list"
        }
      ]
    },
    "member-access-expression": {
      "patterns": [
        {
          "match": "(?x)\r\n(?:(\\?)\\s*)?                   # preceding null-conditional operator?\r\n(\\.)\\s*                        # preceding dot\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\s* # property name\r\n(?![_[:alnum:]]|\\(|(\\?)?\\[|<)  # next character is not alpha-numeric, nor a (, [, or <. Also, test for ?[",
          "captures": {
            "1": {
              "name": "keyword.operator.null-conditional.bf"
            },
            "2": {
              "name": "punctuation.accessor.bf"
            },
            "3": {
              "name": "variable.other.object.property.bf"
            }
          }
        },
        {
          "match": "(?x)\r\n(\\.)?\\s*\r\n(@?[_[:alpha:]][_[:alnum:]]*)\r\n(?<type-params>\\s*<([^<>]|\\g<type-params>)+>\\s*)\r\n(?=\r\n  (\\s*\\?)?\r\n  \\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*\r\n)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.bf"
            },
            "2": {
              "name": "variable.other.object.bf"
            },
            "3": {
              "patterns": [
                {
                  "include": "#type-arguments"
                }
              ]
            }
          }
        },
        {
          "match": "(?x)\r\n(@?[_[:alpha:]][_[:alnum:]]*)\r\n(?=\r\n  (\\s*\\?)?\r\n  \\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*\r\n)",
          "captures": {
            "1": {
              "name": "variable.other.object.bf"
            }
          }
        }
      ]
    },
    "object-creation-expression": {
      "patterns": [
        {
          "include": "#object-creation-expression-with-parameters"
        },
        {
          "include": "#object-creation-expression-with-no-parameters"
        }
      ]
    },
    "object-creation-expression-with-parameters": {
      "begin": "(?x)\r\n(new)\\s+\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.new.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      },
      "end": "(?<=\\))",
      "patterns": [
        {
          "include": "#argument-list"
        }
      ]
    },
    "object-creation-expression-with-no-parameters": {
      "match": "(?x)\r\n(new)\\s+\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(?=\\{|$)",
      "captures": {
        "1": {
          "name": "keyword.other.new.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      }
    },
    "array-creation-expression": {
      "begin": "(?x)\r\n\\b(new|stackalloc)\\b\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)?\\s*\r\n(?=\\[)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.new.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      },
      "end": "(?<=\\])",
      "patterns": [
        {
          "include": "#bracketed-argument-list"
        }
      ]
    },
    "anonymous-object-creation-expression": {
      "begin": "\\b(new)\\b\\s*(?=\\{|$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.new.bf"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#initializer-expression"
        }
      ]
    },
    "bracketed-parameter-list": {
      "begin": "(?=(\\[))",
      "beginCaptures": {
        "1": {
          "name": "punctuation.squarebracket.open.bf"
        }
      },
      "end": "(?=(\\]))",
      "endCaptures": {
        "1": {
          "name": "punctuation.squarebracket.close.bf"
        }
      },
      "patterns": [
        {
          "begin": "(?<=\\[)",
          "end": "(?=\\])",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#attribute-section"
            },
            {
              "include": "#parameter"
            },
            {
              "include": "#punctuation-comma"
            },
            {
              "include": "#variable-initializer"
            }
          ]
        }
      ]
    },
    "parenthesized-parameter-list": {
      "begin": "(\\()",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#parameter"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "parameter": {
      "match": "(?x)\r\n(?:(?:\\b(ref|params|out|in|this)\\b)\\s+)?\r\n(?<type-name>\r\n  (?:\r\n    (?:ref\\s+)?   # ref return\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s+\r\n(\\g<identifier>)",
      "captures": {
        "1": {
          "name": "storage.modifier.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "name": "entity.name.variable.parameter.bf"
        }
      }
    },
    "argument-list": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#named-argument"
        },
        {
          "include": "#argument"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "bracketed-argument-list": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.squarebracket.open.bf"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.squarebracket.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#named-argument"
        },
        {
          "include": "#argument"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "named-argument": {
      "begin": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.variable.parameter.bf"
        },
        "2": {
          "name": "punctuation.separator.colon.bf"
        }
      },
      "end": "(?=(,|\\)|\\]))",
      "patterns": [
        {
          "include": "#argument"
        }
      ]
    },
    "argument": {
      "patterns": [
        {
          "name": "storage.modifier.bf",
          "match": "\\b(ref|out|in)\\b"
        },
        {
          "include": "#declaration-expression-local"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "query-expression": {
      "begin": "(?x)\r\n\\b(from)\\b\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)?\r\n\\s+(\\g<identifier>)\\b\\s*\r\n\\b(in)\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.query.from.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "name": "entity.name.variable.range-variable.bf"
        },
        "8": {
          "name": "keyword.query.in.bf"
        }
      },
      "end": "(?=;|\\))",
      "patterns": [
        {
          "include": "#query-body"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "query-body": {
      "patterns": [
        {
          "include": "#let-clause"
        },
        {
          "include": "#where-clause"
        },
        {
          "include": "#join-clause"
        },
        {
          "include": "#orderby-clause"
        },
        {
          "include": "#select-clause"
        },
        {
          "include": "#group-clause"
        }
      ]
    },
    "let-clause": {
      "begin": "(?x)\r\n\\b(let)\\b\\s*\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\r\n(=)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.query.let.bf"
        },
        "2": {
          "name": "entity.name.variable.range-variable.bf"
        },
        "3": {
          "name": "keyword.operator.assignment.bf"
        }
      },
      "end": "(?=;|\\))",
      "patterns": [
        {
          "include": "#query-body"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "where-clause": {
      "begin": "(?x)\r\n\\b(where)\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.query.where.bf"
        }
      },
      "end": "(?=;|\\))",
      "patterns": [
        {
          "include": "#query-body"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "join-clause": {
      "begin": "(?x)\r\n\\b(join)\\b\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)?\r\n\\s+(\\g<identifier>)\\b\\s*\r\n\\b(in)\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.query.join.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "name": "entity.name.variable.range-variable.bf"
        },
        "8": {
          "name": "keyword.query.in.bf"
        }
      },
      "end": "(?=;|\\))",
      "patterns": [
        {
          "include": "#join-on"
        },
        {
          "include": "#join-equals"
        },
        {
          "include": "#join-into"
        },
        {
          "include": "#query-body"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "join-on": {
      "match": "\\b(on)\\b\\s*",
      "captures": {
        "1": {
          "name": "keyword.query.on.bf"
        }
      }
    },
    "join-equals": {
      "match": "\\b(equals)\\b\\s*",
      "captures": {
        "1": {
          "name": "keyword.query.equals.bf"
        }
      }
    },
    "join-into": {
      "match": "(?x)\r\n\\b(into)\\b\\s*\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*",
      "captures": {
        "1": {
          "name": "keyword.query.into.bf"
        },
        "2": {
          "name": "entity.name.variable.range-variable.bf"
        }
      }
    },
    "orderby-clause": {
      "begin": "\\b(orderby)\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.query.orderby.bf"
        }
      },
      "end": "(?=;|\\))",
      "patterns": [
        {
          "include": "#ordering-direction"
        },
        {
          "include": "#query-body"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "ordering-direction": {
      "match": "\\b(?:(ascending)|(descending))\\b",
      "captures": {
        "1": {
          "name": "keyword.query.ascending.bf"
        },
        "2": {
          "name": "keyword.query.descending.bf"
        }
      }
    },
    "select-clause": {
      "begin": "\\b(select)\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.query.select.bf"
        }
      },
      "end": "(?=;|\\))",
      "patterns": [
        {
          "include": "#query-body"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "group-clause": {
      "begin": "\\b(group)\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.query.group.bf"
        }
      },
      "end": "(?=;|\\))",
      "patterns": [
        {
          "include": "#group-by"
        },
        {
          "include": "#group-into"
        },
        {
          "include": "#query-body"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "group-by": {
      "match": "\\b(by)\\b\\s*",
      "captures": {
        "1": {
          "name": "keyword.query.by.bf"
        }
      }
    },
    "group-into": {
      "match": "(?x)\r\n\\b(into)\\b\\s*\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*",
      "captures": {
        "1": {
          "name": "keyword.query.into.bf"
        },
        "2": {
          "name": "entity.name.variable.range-variable.bf"
        }
      }
    },
    "anonymous-method-expression": {
      "patterns": [
        {
          "begin": "(?x)\r\n(?:\\b(async)\\b\\s*)?\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\r\n(=>)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.bf"
            },
            "2": {
              "name": "entity.name.variable.parameter.bf"
            },
            "3": {
              "name": "keyword.operator.arrow.bf"
            }
          },
          "end": "(?=\\)|;|}|,)",
          "patterns": [
            {
              "include": "#block"
            },
            {
              "include": "#ref-modifier"
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "(?x)\r\n(?:\\b(async)\\b\\s*)?\r\n(\\(.*?\\))\\s*\r\n(=>)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.bf"
            },
            "2": {
              "patterns": [
                {
                  "include": "#lambda-parameter-list"
                }
              ]
            },
            "3": {
              "name": "keyword.operator.arrow.bf"
            }
          },
          "end": "(?=\\)|;|}|,)",
          "patterns": [
            {
              "include": "#block"
            },
            {
              "include": "#ref-modifier"
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "(?x)\r\n(?:\\b(async)\\b\\s*)?\r\n(?:\\b(delegate)\\b\\s*)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.bf"
            },
            "2": {
              "name": "keyword.other.delegate.bf"
            }
          },
          "end": "(?=\\)|;|}|,)",
          "patterns": [
            {
              "include": "#parenthesized-parameter-list"
            },
            {
              "include": "#block"
            },
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "lambda-parameter-list": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#lambda-parameter"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "lambda-parameter": {
      "match": "(?x)\r\n(?:\\b(ref|out|in)\\b)?\\s*\r\n(?:(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s+)?\r\n(\\g<identifier>)\\b\\s*\r\n(?=[,)])",
      "captures": {
        "1": {
          "name": "storage.modifier.bf"
        },
        "2": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "name": "entity.name.variable.parameter.bf"
        }
      }
    },
    "type": {
      "name": "meta.type.bf",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#ref-modifier"
        },
        {
          "include": "#readonly-modifier"
        },
        {
          "include": "#tuple-type"
        },
        {
          "include": "#type-builtin"
        },
        {
          "include": "#type-name"
        },
        {
          "include": "#type-arguments"
        },
        {
          "include": "#type-array-suffix"
        },
        {
          "include": "#type-nullable-suffix"
        }
      ]
    },
    "ref-modifier": {
      "name": "storage.modifier.bf",
      "match": "\\b(ref)\\b"
    },
    "readonly-modifier": {
      "name": "storage.modifier.bf",
      "match": "\\b(readonly)\\b"
    },
    "tuple-type": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parenthesis.open.bf"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#tuple-element"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "tuple-element": {
      "match": "(?x)\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\r\n(?:(?<tuple-name>\\g<identifier>)\\b)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "6": {
          "name": "entity.name.variable.tuple-element.bf"
        }
      }
    },
    "type-builtin": {
      "match": "\\b(bool|byte|char|decimal|double|float|int|long|object|sbyte|short|string|uint|ulong|ushort|void|dynamic)\\b",
      "captures": {
        "1": {
          "name": "keyword.type.bf"
        }
      }
    },
    "type-name": {
      "patterns": [
        {
          "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)",
          "captures": {
            "1": {
              "name": "entity.name.type.alias.bf"
            },
            "2": {
              "name": "punctuation.separator.coloncolon.bf"
            }
          }
        },
        {
          "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\.)",
          "captures": {
            "1": {
              "name": "storage.type.bf"
            },
            "2": {
              "name": "punctuation.accessor.bf"
            }
          }
        },
        {
          "match": "(\\.)\\s*(@?[_[:alpha:]][_[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.bf"
            },
            "2": {
              "name": "storage.type.bf"
            }
          }
        },
        {
          "name": "storage.type.bf",
          "match": "@?[_[:alpha:]][_[:alnum:]]*"
        }
      ]
    },
    "type-arguments": {
      "begin": "<",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.typeparameters.begin.bf"
        }
      },
      "end": ">",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.typeparameters.end.bf"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#type"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "type-array-suffix": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.squarebracket.open.bf"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.squarebracket.close.bf"
        }
      },
      "patterns": [
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "type-nullable-suffix": {
      "match": "\\?",
      "captures": {
        "0": {
          "name": "punctuation.separator.question-mark.bf"
        }
      }
    },
    "operator-assignment": {
      "name": "keyword.operator.assignment.bf",
      "match": "(?<!=|!)(=)(?!=)"
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.bf",
      "match": ","
    },
    "punctuation-semicolon": {
      "name": "punctuation.terminator.statement.bf",
      "match": ";"
    },
    "punctuation-accessor": {
      "name": "punctuation.accessor.bf",
      "match": "\\."
    },
    "preprocessor": {
      "name": "meta.preprocessor.bf",
      "begin": "^\\s*(\\#)\\s*",
      "beginCaptures": {
        "1": {
          "name": "punctuation.separator.hash.bf"
        }
      },
      "end": "(?<=$)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#preprocessor-define-or-undef"
        },
        {
          "include": "#preprocessor-if-or-elif"
        },
        {
          "include": "#preprocessor-else-or-endif"
        },
        {
          "include": "#preprocessor-warning-or-error"
        },
        {
          "include": "#preprocessor-region"
        },
        {
          "include": "#preprocessor-endregion"
        },
        {
          "include": "#preprocessor-load"
        },
        {
          "include": "#preprocessor-r"
        },
        {
          "include": "#preprocessor-line"
        },
        {
          "include": "#preprocessor-pragma-warning"
        },
        {
          "include": "#preprocessor-pragma-checksum"
        }
      ]
    },
    "preprocessor-define-or-undef": {
      "match": "\\b(?:(define)|(undef))\\b\\s*\\b([_[:alpha:]][_[:alnum:]]*)\\b",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.define.bf"
        },
        "2": {
          "name": "keyword.preprocessor.undef.bf"
        },
        "3": {
          "name": "entity.name.variable.preprocessor.symbol.bf"
        }
      }
    },
    "preprocessor-if-or-elif": {
      "begin": "\\b(?:(if)|(elif))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.if.bf"
        },
        "2": {
          "name": "keyword.preprocessor.elif.bf"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#preprocessor-expression"
        }
      ]
    },
    "preprocessor-else-or-endif": {
      "match": "\\b(?:(else)|(endif))\\b",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.else.bf"
        },
        "2": {
          "name": "keyword.preprocessor.endif.bf"
        }
      }
    },
    "preprocessor-warning-or-error": {
      "match": "\\b(?:(warning)|(error))\\b\\s*(.*)(?=$)",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.warning.bf"
        },
        "2": {
          "name": "keyword.preprocessor.error.bf"
        },
        "3": {
          "name": "string.unquoted.preprocessor.message.bf"
        }
      }
    },
    "preprocessor-load": {
      "begin": "\\b(load)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.load.bf"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "\\\"[^\"]*\\\"",
          "captures": {
            "0": {
              "name": "string.quoted.double.bf"
            }
          }
        }
      ]
    },
    "preprocessor-r": {
      "begin": "\\b(r)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.r.bf"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "\\\"[^\"]*\\\"",
          "captures": {
            "0": {
              "name": "string.quoted.double.bf"
            }
          }
        }
      ]
    },
    "preprocessor-region": {
      "match": "\\b(region)\\b\\s*(.*)(?=$)",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.region.bf"
        },
        "2": {
          "name": "string.unquoted.preprocessor.message.bf"
        }
      }
    },
    "preprocessor-endregion": {
      "match": "\\b(endregion)\\b",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.endregion.bf"
        }
      }
    },
    "preprocessor-line": {
      "begin": "\\b(line)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.line.bf"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "\\b(?:(default|hidden))",
          "captures": {
            "1": {
              "name": "keyword.preprocessor.default.bf"
            },
            "2": {
              "name": "keyword.preprocessor.hidden.bf"
            }
          }
        },
        {
          "match": "[0-9]+",
          "captures": {
            "0": {
              "name": "constant.numeric.decimal.bf"
            }
          }
        },
        {
          "match": "\\\"[^\"]*\\\"",
          "captures": {
            "0": {
              "name": "string.quoted.double.bf"
            }
          }
        }
      ]
    },
    "preprocessor-pragma-warning": {
      "match": "\\b(pragma)\\b\\s*\\b(warning)\\b\\s*\\b(?:(disable)|(restore))\\b(\\s*[0-9]+(?:\\s*,\\s*[0-9]+)?)?",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.pragma.bf"
        },
        "2": {
          "name": "keyword.preprocessor.warning.bf"
        },
        "3": {
          "name": "keyword.preprocessor.disable.bf"
        },
        "4": {
          "name": "keyword.preprocessor.restore.bf"
        },
        "5": {
          "patterns": [
            {
              "match": "[0-9]+",
              "captures": {
                "0": {
                  "name": "constant.numeric.decimal.bf"
                }
              }
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      }
    },
    "preprocessor-pragma-checksum": {
      "match": "\\b(pragma)\\b\\s*\\b(checksum)\\b\\s*(\\\"[^\"]*\\\")\\s*(\\\"[^\"]*\\\")\\s*(\\\"[^\"]*\\\")",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.pragma.bf"
        },
        "2": {
          "name": "keyword.preprocessor.checksum.bf"
        },
        "3": {
          "name": "string.quoted.double.bf"
        },
        "4": {
          "name": "string.quoted.double.bf"
        },
        "5": {
          "name": "string.quoted.double.bf"
        }
      }
    },
    "preprocessor-expression": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bf"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bf"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-expression"
            }
          ]
        },
        {
          "match": "\\b(?:(true)|(false)|([_[:alpha:]][_[:alnum:]]*))\\b",
          "captures": {
            "1": {
              "name": "constant.language.boolean.true.bf"
            },
            "2": {
              "name": "constant.language.boolean.false.bf"
            },
            "3": {
              "name": "entity.name.variable.preprocessor.symbol.bf"
            }
          }
        },
        {
          "match": "(==|!=)|(\\!|&&|\\|\\|)",
          "captures": {
            "1": {
              "name": "keyword.operator.comparison.bf"
            },
            "2": {
              "name": "keyword.operator.logical.bf"
            }
          }
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.bf",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.bf"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.bf"
            }
          }
        },
        {
          "begin": "(^\\s+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.bf"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "name": "comment.block.documentation.bf",
              "begin": "(?<!/)///(?!/)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.bf"
                }
              },
              "end": "(?=$)"
            },
            {
              "name": "comment.line.double-slash.bf",
              "begin": "(?<!/)//(?:(?!/)|(?=//))",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.bf"
                }
              },
              "end": "(?=$)"
            }
          ]
        }
      ]
    }
  }
}